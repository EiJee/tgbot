import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from db import init_db, add_product, remove_product, list_fridge, list_shopping, mark_as_bought
import os
from dotenv import load_dotenv

init_db()
load_dotenv()


bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))

user_state = {}

ALLOWED_USERS = {
    934625858,  # MatveevDmitry
    613878272,  # MatveevaOlga
}


def is_allowed(message):
    return message.chat.id in ALLOWED_USERS


@bot.message_handler(commands=['myid'])
def get_my_id(message):
    bot.send_message(message.chat.id, f"–í–∞—à chat_id: {message.chat.id}")


def get_menu_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(
        KeyboardButton("‚ûï –í —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫"),
        KeyboardButton("üõí –í —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫")
    )
    markup.row(
        KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫"),
        KeyboardButton("üõç –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∫—É–ø–∫–∏")
    )
    markup.row(
        KeyboardButton("‚úÖ –ö—É–ø–ª–µ–Ω–æ"),
        KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å")
    )
    return markup


@bot.message_handler(commands=['start'])
def handle_start(message):
    if not is_allowed(message):
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return

    bot.send_message(
        message.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –≠—Ç–æ —Å–µ–º–µ–π–Ω—ã–π —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ üßä\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_menu_keyboard()
    )


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    chat_id = message.chat.id
    text = message.text.strip()
    state = user_state.get(chat_id)

    if text == "‚ûï –í —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫":
        user_state[chat_id] = "add_fridge"
        bot.send_message(chat_id, "üçé –í–≤–µ–¥–∏ –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    elif text == "üõí –í —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫":
        user_state[chat_id] = "add_buy"
        bot.send_message(chat_id, "üõç –í–≤–µ–¥–∏, —á—Ç–æ –∫—É–ø–∏—Ç—å (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    elif text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫":
        items = list_fridge()
        msg = "üßä –í —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ:\n" + \
            "\n".join(
                f"‚Ä¢ {i}" for i in items) if items else "ü´ô –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –ø—É—Å—Ç."
        bot.send_message(chat_id, msg)
    elif text == "üõç –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∫—É–ø–∫–∏":
        items = list_shopping()
        if not items:
            bot.send_message(chat_id, "üß∫ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.")
            return
        for item in items:
            markup = InlineKeyboardMarkup()
            markup.add(
                InlineKeyboardButton("‚úÖ –ö—É–ø–ª–µ–Ω–æ", callback_data=f"buy:{item}"),
                InlineKeyboardButton(
                    "üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{item}")
            )
            bot.send_message(chat_id, f"üõí {item}", reply_markup=markup)
    elif text == "‚úÖ –ö—É–ø–ª–µ–Ω–æ":
        user_state[chat_id] = "mark_bought"
        bot.send_message(chat_id, "‚úÖ –ù–∞–ø–∏—à–∏, —á—Ç–æ –∫—É–ø–ª–µ–Ω–æ:")
    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å":
        items = list_fridge()
        if not items:
            bot.send_message(chat_id, "ü´ô –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
            return
        markup = InlineKeyboardMarkup(row_width=1)
        for item in items:
            markup.add(InlineKeyboardButton(
                f"üóë –£–¥–∞–ª–∏—Ç—å {item}", callback_data=f"delete_fridge:{item}"))
        bot.send_message(
            chat_id, "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞:", reply_markup=markup)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if state in ("add_fridge", "add_buy"):
            products = [p.strip() for p in text.split(",") if p.strip()]
            added, existed = [], []

            for product in products:
                success = add_product(
                    product, in_fridge=(state == "add_fridge"))
                (added if success else existed).append(product)

            reply = ""
            if added:
                reply += f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {', '.join(added)}\n"
            if existed:
                reply += f"‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å: {', '.join(existed)}"
            bot.send_message(chat_id, reply.strip())
            user_state[chat_id] = None

        elif state == "mark_bought":
            if mark_as_bought(text):
                bot.send_message(
                    chat_id, f"‚úÖ {text} –∫—É–ø–ª–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫.")
            else:
                bot.send_message(chat_id, f"‚ùå {text} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–∫—É–ø–∫–∞—Ö.")
            user_state[chat_id] = None

        elif state == "remove":
            if remove_product(text):
                bot.send_message(chat_id, f"üóë {text} —É–¥–∞–ª—ë–Ω.")
            else:
                bot.send_message(chat_id, f"‚ùå {text} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            user_state[chat_id] = None

        else:
            bot.send_message(chat_id, "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("buy:") or call.data.startswith("delete:"))
def handle_buy_or_delete(call):
    chat_id = call.message.chat.id
    if chat_id not in ALLOWED_USERS:
        bot.answer_callback_query(call.id, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    action, product = call.data.split(":", 1)

    if action == "buy":
        if mark_as_bought(product):
            bot.answer_callback_query(
                call.id, f"{product} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫.")
            bot.edit_message_text(
                f"‚úÖ {product} –∫—É–ø–ª–µ–Ω –∏ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ.", chat_id, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, f"{product} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif action == "delete":
        if remove_product(product):
            bot.answer_callback_query(call.id, f"{product} —É–¥–∞–ª—ë–Ω.")
            bot.edit_message_text(
                f"üóë {product} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.", chat_id, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, f"{product} –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_fridge:"))
def handle_delete_fridge(call):
    chat_id = call.message.chat.id
    product = call.data.split("delete_fridge:", 1)[1]

    if remove_product(product):
        bot.answer_callback_query(
            call.id, f"üóë {product} —É–¥–∞–ª—ë–Ω –∏–∑ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞.")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        items = list_fridge()
        if not items:
            bot.edit_message_text("ü´ô –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –ø—É—Å—Ç.",
                                  chat_id, call.message.message_id)
            return
        markup = InlineKeyboardMarkup(row_width=1)
        for item in items:
            markup.add(InlineKeyboardButton(
                f"üóë –£–¥–∞–ª–∏—Ç—å {item}", callback_data=f"delete_fridge:{item}"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞:",
                              chat_id, call.message.message_id, reply_markup=markup)
    else:
        bot.answer_callback_query(
            call.id, f"‚ùå {product} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ.")


bot.polling(none_stop=True)
